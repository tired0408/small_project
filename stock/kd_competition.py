import pandas as pd
import time
import matplotlib.pyplot as plt
import matplotlib as mpl
# import importData


# 获取每一列的类别个数
def get_column_type_num(date_frame):
    columns = date_frame.columns
    for column in columns:
        print(column+":",date_frame[column].unique().size)


# 获取某个列各个取值的个数
def get_column_each_type_num(date_frame, column_key):
    return_content = date_frame.groupby(column_key).size()
    for i in range(len(return_content)):
        print(return_content.index[i],"\t",return_content.values[i])


# 根据条件打印出某行数据
def get_row_by_condition(date_frame):
    os_lists = date_frame["os"]
    for i in range(len(os_lists)):
        if os_lists[i] == 0:
            print("第",i,"行的数据：")
            print(date_frame.ix[i])


# 获取某列的最大值及最小值
def get_column_max_and_min(date_frame):
    time_list = date_frame["time"]
    print(time_list)
    print("------------------------------------")
    max_value = 0
    min_value = 0
    for tm in time_list:
        if tm > max_value:
            max_value = tm
        if min_value == 0 or tm < min_value:
            min_value = tm
    print("max:", max_value, "min:", min_value,"计算所得：", (max_value-min_value)/24/3600)


# 获取提取时间特征数据
def get_time_character_data(date_frame):
    time_list = date_frame["time"]
    time_dict = {}
    return_value = []
    for i in range(len(time_list)):
        time_string = time.strftime("%m-%d %H",time.localtime(time_list[i]))
        if time_string in time_dict:
            time_dict[time_string][0] += 1
            if date_frame["click"][i] == 1:
                time_dict[time_string][1] += 1
        else:
            time_dict[time_string] = [1, 1 if date_frame["click"][i] == 1 else 0,time_list[i]]
    time_dict = sorted(time_dict.items(), key=lambda x: x[1][2], reverse=True)
    for key, val in time_dict:
        return_value.append([key, val[0], val[1] / val[0] * 100])
    return return_value


# 用matplotlib画折线图
def draw_line_chart():
    mpl.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体 SimHei为黑体
    mpl.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号
    # 准备数据
    data_of_time = [('06-02 23', 5749, 23.44755609671247), ('06-02 22', 7922, 22.645796516031304), ('06-02 21', 8828, 22.11146352514726), ('06-02 20', 9223, 22.075246665943837), ('06-02 19', 8727, 22.516328635269854), ('06-02 18', 8178, 22.93959403277085), ('06-02 17', 7818, 23.151701202353543), ('06-02 16', 7624, 22.324239244491082), ('06-02 15', 7615, 23.742613263296125), ('06-02 14', 7259, 21.98649951783992), ('06-02 13', 8369, 22.177082088660534), ('06-02 12', 8339, 20.781868329535914), ('06-02 11', 7960, 21.344221105527637), ('06-02 10', 8004, 20.91454272863568), ('06-02 09', 7177, 21.9172356137662), ('06-02 08', 7263, 21.891780256092524), ('06-02 07', 7056, 20.266439909297052), ('06-02 06', 5068, 19.475138121546962), ('06-02 05', 3244, 15.967940813810111), ('06-02 04', 2062, 12.366634335596508), ('06-02 03', 1727, 9.03300521134916), ('06-02 02', 2296, 9.36411149825784), ('06-02 01', 3369, 9.64677945978035), ('06-02 00', 6334, 10.5462582886012), ('06-01 23', 5666, 23.226261913166255), ('06-01 22', 8628, 21.870653685674547), ('06-01 21', 9193, 22.136408136625693), ('06-01 20', 9572, 22.04346009193481), ('06-01 19', 8914, 21.943010993942114), ('06-01 18', 8611, 21.309952386482404), ('06-01 17', 8199, 21.14892060007318), ('06-01 16', 6660, 20.99099099099099), ('06-01 15', 6306, 20.282270853155726), ('06-01 14', 6684, 20.167564332734887), ('06-01 13', 6942, 19.533275713050994), ('06-01 12', 7829, 20.130284838421254), ('06-01 11', 7523, 19.380566263458725), ('06-01 10', 6983, 18.87440927967922), ('06-01 09', 7508, 19.37932871603623), ('06-01 08', 6967, 19.879431606143246), ('06-01 07', 6307, 21.055969557634374), ('06-01 06', 4941, 20.603116777980166), ('06-01 05', 2708, 18.648449039881832), ('06-01 04', 1581, 11.76470588235294), ('06-01 03', 1592, 9.359296482412061), ('06-01 02', 2135, 8.665105386416862), ('06-01 01', 3247, 8.500153988296889), ('06-01 00', 6605, 7.797123391370174), ('05-31 23', 5620, 20.729537366548044), ('05-31 22', 9160, 21.38646288209607), ('05-31 21', 10604, 20.91663523198793), ('05-31 20', 9996, 20.158063225290114), ('05-31 19', 6831, 24.037476211389254), ('05-31 18', 6385, 22.94440093970243), ('05-31 17', 7319, 22.40743270938653), ('05-31 16', 7311, 22.308849678566546), ('05-31 15', 6952, 22.6409666283084), ('05-31 14', 6556, 23.032336790726053), ('05-31 13', 6836, 22.586307782328845), ('05-31 12', 7360, 22.39130434782609), ('05-31 11', 6676, 21.494907130017975), ('05-31 10', 6080, 21.38157894736842), ('05-31 09', 6010, 21.713810316139767), ('05-31 08', 5767, 22.854170279174614), ('05-31 07', 4549, 20.81776214552649), ('05-31 06', 3616, 20.24336283185841), ('05-31 05', 3187, 14.93567618449953), ('05-31 04', 1848, 9.036796536796537), ('05-31 03', 1753, 5.818596691386195), ('05-31 02', 2339, 6.241983753740915), ('05-31 01', 2761, 7.497283592901123), ('05-31 00', 5171, 8.567008315606266), ('05-30 23', 4731, 20.883534136546185), ('05-30 22', 6637, 22.073225855054996), ('05-30 21', 7497, 22.488995598239296), ('05-30 20', 7048, 21.240068104426786), ('05-30 19', 6668, 21.115776844631075), ('05-30 18', 6208, 21.1340206185567), ('05-30 17', 6112, 20.926047120418847), ('05-30 16', 6384, 20.144110275689222), ('05-30 15', 8709, 15.50120564932828), ('05-30 14', 6478, 20.083359061438717), ('05-30 13', 6543, 20.800855876509246), ('05-30 12', 6981, 21.057155135367424), ('05-30 11', 6575, 20.927756653992397), ('05-30 10', 6511, 21.302411303947167), ('05-30 09', 6110, 21.342062193126026), ('05-30 08', 5714, 21.50857542877144), ('05-30 07', 4787, 21.224148736160434), ('05-30 06', 3838, 19.645648775403856), ('05-30 05', 2675, 19.401869158878505), ('05-30 04', 1452, 12.327823691460054), ('05-30 03', 1216, 8.717105263157894), ('05-30 02', 1558, 8.600770218228499), ('05-30 01', 2540, 9.763779527559056), ('05-30 00', 6092, 7.189757058437294), ('05-29 23', 4967, 21.139520837527684), ('05-29 22', 7228, 21.6519092418373), ('05-29 21', 8755, 20.148486579097657), ('05-29 20', 8423, 19.945387629110765), ('05-29 19', 7857, 20.92401680030546), ('05-29 18', 7482, 21.010425020048114), ('05-29 17', 7261, 21.319377496212645), ('05-29 16', 7148, 21.5864577504197), ('05-29 15', 7180, 21.197771587743734), ('05-29 14', 7121, 21.584047184384218), ('05-29 13', 7602, 20.836621941594316), ('05-29 12', 8269, 20.58289998790664), ('05-29 11', 7805, 21.56310057655349), ('05-29 10', 7786, 20.369894682763938), ('05-29 09', 7478, 20.90131051083177), ('05-29 08', 7060, 20.96317280453258), ('05-29 07', 6001, 21.84635894017664), ('05-29 06', 3612, 18.383167220376524), ('05-29 05', 2152, 15.427509293680297), ('05-29 04', 1329, 13.46877351392024), ('05-29 03', 1181, 11.09229466553768), ('05-29 02', 1674, 10.51373954599761), ('05-29 01', 2892, 9.751037344398341), ('05-29 00', 6901, 7.8249529053760325), ('05-28 23', 5775, 19.705627705627705), ('05-28 22', 7888, 19.548681541582148), ('05-28 21', 8919, 19.934970288148897), ('05-28 20', 8399, 20.58578402190737), ('05-28 19', 7338, 20.577814118288362), ('05-28 18', 7468, 21.156936261381894), ('05-28 17', 7476, 20.880149812734082), ('05-28 16', 7219, 20.750796509211803), ('05-28 15', 7650, 20.19607843137255), ('05-28 14', 7216, 20.787139689578716), ('05-28 13', 7663, 20.46196006785854), ('05-28 12', 8288, 20.27027027027027), ('05-28 11', 7873, 21.148228121427664), ('05-28 10', 7445, 21.45063801208865), ('05-28 09', 6795, 22.251655629139073), ('05-28 08', 6872, 22.628055878928986), ('05-28 07', 5221, 20.551618463895803), ('05-28 06', 3354, 19.350029815146094), ('05-28 05', 1971, 16.894977168949772), ('05-28 04', 1132, 14.575971731448764), ('05-28 03', 1128, 11.613475177304965), ('05-28 02', 1534, 10.75619295958279), ('05-28 01', 2708, 9.342688330871491), ('05-28 00', 5401, 6.850583225328642), ('05-27 23', 5790, 21.3126079447323), ('05-27 22', 8083, 21.31634294197699), ('05-27 21', 8374, 21.733938380702174), ('05-27 20', 8262, 21.338658920358267), ('05-27 19', 7760, 21.25), ('05-27 18', 7985, 20.36318096430808), ('05-27 17', 7562, 23.089129859825444), ('05-27 16', 7430, 21.21130551816958), ('05-27 15', 9007, 16.209614744087933), ('05-27 14', 5606, 20.156974669996433), ('05-27 13', 5899, 19.766062044414305), ('05-27 12', 6502, 19.19409412488465), ('05-27 11', 6279, 19.939480809046024), ('05-27 10', 6275, 20.50996015936255), ('05-27 09', 5926, 19.99662504218697), ('05-27 08', 5406, 20.60673325934147), ('05-27 07', 4639, 20.629446001293385), ('05-27 06', 3599, 18.421783828841345), ('05-27 05', 2282, 16.608238387379494), ('05-27 04', 1203, 14.04821280133001), ('05-27 03', 1076, 11.431226765799256), ('05-27 02', 1371, 11.524434719183079), ('05-27 01', 2552, 9.952978056426334), ('05-27 00', 6622, 7.762005436424041)]
    time_of_dict = {}
    for value in data_of_time:
        time = value[0]
        if time[:5] not in time_of_dict:
            time_of_dict[time[:5]] = {"total_num":[0 for i in range(24)],"click_rate":[0 for i in range(24)]}
        time_of_dict[time[:5]]["total_num"][int(time[6:])] = value[1]
        time_of_dict[time[:5]]["click_rate"][int(time[6:])] = value[2]
    for value in time_of_dict.items():
        print(value)
    plt.figure(figsize=(15,15))  # 创建绘图对象
    time_index1 = "06-02"
    plt.subplot(221)  # 构建2*2的方格，占据第一个位置
    plt.plot(range(24),time_of_dict[time_index1]["total_num"],marker='o')  # 在当前绘图对象进行绘图（两个参数是x,y轴的数据）,marker显示点
    for a, b in zip(range(24), time_of_dict[time_index1]["total_num"]):  # 增加点坐标数据
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=10)
    plt.title(time_index1+"的总样本曲线图")  # 标题
    plt.xlabel("hours")  # 横坐标标签
    plt.ylabel("total_num")  # 纵坐标标签
    plt.subplot(222)
    plt.plot(range(24),time_of_dict["06-02"]["click_rate"])
    plt.title(time_index1+"的点击率曲线图")
    plt.xlabel("hours")
    plt.ylabel("click_rate")
    time_index1 = "05-29"
    plt.subplot(223)
    plt.plot(range(24), time_of_dict[time_index1]["total_num"])  # 在当前绘图对象进行绘图（两个参数是x,y轴的数据）
    plt.title(time_index1 + "的总样本曲线图")  # 标题
    plt.xlabel("hours")  # 横坐标标签
    plt.ylabel("total_num")  # 纵坐标标签
    plt.subplot(224)
    plt.plot(range(24), time_of_dict["06-02"]["click_rate"])
    plt.title(time_index1 + "的点击率曲线图")
    plt.xlabel("hours")
    plt.ylabel("click_rate")
    plt.savefig("time_feature.png")  # 保存图片
    plt.show()  # 显示图表


# 获取提取某列各分类关于点击率的数据
def get_col_character_data(date_frame, column_name):
    data_list = date_frame[column_name]
    data_dict = {}
    return_value = []
    for i in range(len(data_list)):
        data_string = data_list[i]
        if data_string in data_dict:
            data_dict[data_string][0] += 1
            if date_frame["click"][i] == 1:
                data_dict[data_string][1] += 1
        else:
            data_dict[data_string] = [1, 1 if date_frame["click"][i] == 1 else 0]
    for key, val in data_dict.items():
        return_value.append([key, val[0], val[1] / val[0] * 100])
    return return_value


file_path = "E:\\桌面文件\\算法比赛题"
path = file_path+"\\test.txt"
path = file_path+"\\round1_iflyad_train.txt"
data = pd.read_csv(path, delimiter="\t")
print(data.columns)
col_name = "creative_id"

# export_data = get_col_character_data(data, col_name)
# export_data = sorted(export_data, key=lambda da: str(da[0])) # 对dict进行排序
# importData.data_to_csv("D:\\胡\\桌面文件\\算法比赛题\\"+col_name+".txt", export_data, [col_name, "样本数", "点击率"])

